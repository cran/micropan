// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// extractSeq
SEXP extractSeq(SEXP Gseq, SEXP Left, SEXP Right, SEXP Strand);
RcppExport SEXP _micropan_extractSeq(SEXP GseqSEXP, SEXP LeftSEXP, SEXP RightSEXP, SEXP StrandSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type Gseq(GseqSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Left(LeftSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Right(RightSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Strand(StrandSEXP);
    rcpp_result_gen = Rcpp::wrap(extractSeq(Gseq, Left, Right, Strand));
    return rcpp_result_gen;
END_RCPP
}
// ORF_index
Rcpp::DataFrame ORF_index(SEXP Tags, SEXP Sequence);
RcppExport SEXP _micropan_ORF_index(SEXP TagsSEXP, SEXP SequenceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type Tags(TagsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Sequence(SequenceSEXP);
    rcpp_result_gen = Rcpp::wrap(ORF_index(Tags, Sequence));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_micropan_extractSeq", (DL_FUNC) &_micropan_extractSeq, 4},
    {"_micropan_ORF_index", (DL_FUNC) &_micropan_ORF_index, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_micropan(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
